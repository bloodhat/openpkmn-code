/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TabbedMainWindow.java
 *
 * Created on Dec 21, 2009, 10:10:22 PM
 */
package openpkmnclient;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import org.jdesktop.swingworker.SwingWorker;
import java.util.Collection;
import java.util.EnumSet;
import java.util.concurrent.ExecutionException;
import openpkmnclient.MainController.BattleAndOpponentData;
import openpkmnclient.MainController.InitialStatus;
import openpkmnclient.MainController.TeamAndPkmnUpdater;
import openpkmnclient.MainModel.Status;
import openpkmnclient.MoveSelectionPolicyChangedListener.MoveSelectionPolicyChangedEvent;
import openpkmnclient.MoveSelectionPolicyChangedListener.Policy;

/**
 *
 * @author matt
 */
public class TabbedMainWindow extends javax.swing.JFrame
        implements MainModel.MainModelStatusChangedEventListener,
        BattleModel.BattleModelChangedEventListener {

    private MainController mainController;
    private MainModel mainModel;
    private BattleModel battleModel;
    private WaitListener waitListener;
    private FindBattleListener findBattleListener;
    private ChallengeListener challengeListener;
    private CancelListener cancelListener;
    private Timer timer;
    private Collection<MoveSelectionPolicyChangedListener> moveSelectionPolicyChangedListeners;

    /** Creates new form TabbedMainWindow */
    public TabbedMainWindow() {
        initComponents();
        manualInitComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pkmnButtonGroup = new javax.swing.ButtonGroup();
        teamButtonGroup = new javax.swing.ButtonGroup();
        statButtonGroup = new javax.swing.ButtonGroup();
        tabbedPanel = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        rulesPane = new javax.swing.JScrollPane();
        rulesTable = new openpkmnclient.RulesTable();
        makePkmnPanel = new javax.swing.JPanel();
        selectionPanel = new javax.swing.JPanel();
        levelLabel = new javax.swing.JLabel();
        attackLabel = new javax.swing.JLabel();
        defenseLabel = new javax.swing.JLabel();
        speedLabel = new javax.swing.JLabel();
        specialLabel = new javax.swing.JLabel();
        hpLabel = new javax.swing.JLabel();
        speedBox = new javax.swing.JTextField();
        levelBox = new javax.swing.JTextField();
        specialBox = new javax.swing.JTextField();
        useDV = new javax.swing.JRadioButton();
        useStat = new javax.swing.JRadioButton();
        attackBox = new javax.swing.JTextField();
        statMechanismLabel = new javax.swing.JLabel();
        hpBox = new javax.swing.JTextField();
        defenseBox = new javax.swing.JTextField();
        createButton = new javax.swing.JButton();
        informationLabel = new javax.swing.JLabel();
        pkmnPanel = new javax.swing.JPanel();
        pkmnRandomlyButton = new javax.swing.JRadioButton();
        pkmnFromListButton = new javax.swing.JRadioButton();
        unevolvedBox = new javax.swing.JCheckBox();
        pkmnPane = new javax.swing.JScrollPane();
        creatablePkmnList = new openpkmnclient.CreatablePkmnList();
        movePanel = new javax.swing.JPanel();
        moveRandomlyButton = new javax.swing.JRadioButton();
        moveFromListButton = new javax.swing.JRadioButton();
        nicknameField = new javax.swing.JTextField();
        nicknameLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        learnableMovesTable1 = new openpkmnclient.LearnableMovesTable();
        teamsPanel = new javax.swing.JPanel();
        teamFormationPanel = new javax.swing.JPanel();
        formTeamButton = new javax.swing.JButton();
        randomTeamButton = new javax.swing.JButton();
        starterLabel = new javax.swing.JLabel();
        deletePkmnButton = new javax.swing.JButton();
        deleteTeamButton = new javax.swing.JButton();
        availablePkmnPanel = new javax.swing.JPanel();
        availablePkmnPane = new javax.swing.JScrollPane();
        availablePkmnTable = new openpkmnclient.AvailablePkmnTable();
        availableTeamsPanel = new javax.swing.JPanel();
        availableTeamsPane = new javax.swing.JScrollPane();
        availableTeamsTable = new openpkmnclient.AvailableTeamsTable();
        starterList = new openpkmnclient.StarterList();
        findBattlePanel = new javax.swing.JPanel();
        usersPanel = new javax.swing.JPanel();
        usersPane = new javax.swing.JScrollPane();
        usersTable = new openpkmnclient.UsersTable();
        controlsPanel = new javax.swing.JPanel();
        batteNowLabel = new javax.swing.JLabel();
        findBattleButton = new javax.swing.JButton();
        findRandomBattleButton = new javax.swing.JButton();
        moreSpecificLabel = new javax.swing.JLabel();
        waitButton = new javax.swing.JButton();
        challengeButton = new javax.swing.JButton();
        battlePanel = new javax.swing.JPanel();
        opponentPkmnPanel = new javax.swing.JPanel();
        opponentLabel = new javax.swing.JLabel();
        opponentStatus = new javax.swing.JLabel();
        opponentLevel = new javax.swing.JLabel();
        opponentHPLabel = new javax.swing.JLabel();
        opponentHPBar = new javax.swing.JProgressBar();
        opponentIcon = new openpkmnclient.PkmnIcon();
        ballsPanel = new openpkmnclient.BallsPanel();
        battlePkmnPanel = new javax.swing.JPanel();
        pkmnName = new javax.swing.JLabel();
        pkmnLevel = new javax.swing.JLabel();
        pkmnStatus = new javax.swing.JLabel();
        pkmnHPBar = new javax.swing.JProgressBar();
        pkmnHPFraction = new javax.swing.JLabel();
        pkmnHPLabel = new javax.swing.JLabel();
        pkmnIcon = new openpkmnclient.PkmnIcon();
        battleMovesPanel = new javax.swing.JPanel();
        attackButton = new javax.swing.JButton();
        battleMovesPane = new javax.swing.JScrollPane();
        battleMovesTable = new openpkmnclient.BattleMovesTable();
        battleSwitchPanel = new javax.swing.JPanel();
        runButton = new javax.swing.JButton();
        switchButton = new javax.swing.JButton();
        battleSwitchPane = new javax.swing.JScrollPane();
        battleSwitchTable = new openpkmnclient.BattlePkmnTable();
        messageAreaPane = new javax.swing.JScrollPane();
        messageArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        chatAreaPane = new javax.swing.JScrollPane();
        chatArea = new javax.swing.JTextArea();
        chatUsersPane = new javax.swing.JScrollPane();
        chatUsersTable = new openpkmnclient.ChatUsersTable();
        chatTextField = new javax.swing.JTextField();
        recipientMenu = new javax.swing.JComboBox();
        textToLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        currentStatusTitleLabel = new javax.swing.JLabel();
        selectedTeamTitleLabel = new javax.swing.JLabel();
        currentRulesTitleLabel = new javax.swing.JLabel();
        currentRulesLabel = new javax.swing.JLabel();
        selectedStarterLabel = new javax.swing.JLabel();
        selectedTeamRulesLabel = new javax.swing.JLabel();
        selectedStarterTitleLabel = new javax.swing.JLabel();
        selectedTeamRulesTitleLabel = new javax.swing.JLabel();
        currentStatusLabel = new javax.swing.JLabel();
        selectedTeamLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                logoutOnClose(evt);
            }
        });

        rulesTable.addRulesTableUpdatedListener(new openpkmnclient.RulesTableUpdatedListener() {
            public void rulesTableUpdated(openpkmnclient.RulesTableUpdatedListener.RulesTableUpdatedEvent evt) {
                rulesTableRulesTableUpdated(evt);
            }
        });
        rulesPane.setViewportView(rulesTable);

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(rulesPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(rulesPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPanel.addTab("Set Rules", jPanel3);

        levelLabel.setText("Level");

        attackLabel.setText("Attack");

        defenseLabel.setText("Defense");

        speedLabel.setText("Speed");

        specialLabel.setText("Special");

        hpLabel.setText("HP stat (if stats not set by DV)");

        speedBox.setText("15");
        speedBox.setEnabled(false);

        levelBox.setText("100");
        levelBox.setEnabled(false);

        specialBox.setText("15");
        specialBox.setEnabled(false);

        statButtonGroup.add(useDV);
        useDV.setSelected(true);
        useDV.setText("DV (0-15)");
        useDV.setEnabled(false);

        statButtonGroup.add(useStat);
        useStat.setText("Actual Stat Value");
        useStat.setEnabled(false);

        attackBox.setText("15");
        attackBox.setEnabled(false);
        attackBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attackBoxActionPerformed(evt);
            }
        });

        statMechanismLabel.setText("Set stats by:");

        hpBox.setEnabled(false);

        defenseBox.setText("15");
        defenseBox.setEnabled(false);

        createButton.setText("Create");
        createButton.setEnabled(false);
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        informationLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        org.jdesktop.layout.GroupLayout selectionPanelLayout = new org.jdesktop.layout.GroupLayout(selectionPanel);
        selectionPanel.setLayout(selectionPanelLayout);
        selectionPanelLayout.setHorizontalGroup(
            selectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(selectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(selectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(selectionPanelLayout.createSequentialGroup()
                        .add(levelLabel)
                        .add(20, 20, 20)
                        .add(levelBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 63, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(statMechanismLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(useDV)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(useStat))
                    .add(selectionPanelLayout.createSequentialGroup()
                        .add(selectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(selectionPanelLayout.createSequentialGroup()
                                .add(hpLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(hpBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(selectionPanelLayout.createSequentialGroup()
                                .add(selectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(attackLabel)
                                    .add(speedLabel))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(selectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(speedBox)
                                    .add(attackBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 64, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(selectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(specialLabel)
                                    .add(defenseLabel))
                                .add(5, 5, 5)
                                .add(selectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, defenseBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, specialBox))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 132, Short.MAX_VALUE)
                        .add(selectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(createButton)
                            .add(informationLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 199, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        selectionPanelLayout.setVerticalGroup(
            selectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(selectionPanelLayout.createSequentialGroup()
                .add(12, 12, 12)
                .add(selectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(levelLabel)
                    .add(levelBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(statMechanismLabel)
                    .add(useDV)
                    .add(useStat))
                .add(6, 6, 6)
                .add(selectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(selectionPanelLayout.createSequentialGroup()
                        .add(selectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(attackLabel)
                            .add(attackBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(defenseLabel)
                            .add(defenseBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(selectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(speedLabel)
                            .add(speedBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(specialLabel)
                            .add(specialBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(informationLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(selectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(hpLabel)
                    .add(hpBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(createButton))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pkmnButtonGroup.add(pkmnRandomlyButton);
        pkmnRandomlyButton.setText("Select randomly");
        pkmnRandomlyButton.setEnabled(false);
        pkmnRandomlyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pkmnRandomlyButtonActionPerformed(evt);
            }
        });

        pkmnButtonGroup.add(pkmnFromListButton);
        pkmnFromListButton.setSelected(true);
        pkmnFromListButton.setText("Select from list");
        pkmnFromListButton.setEnabled(false);
        pkmnFromListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pkmnFromListButtonActionPerformed(evt);
            }
        });

        unevolvedBox.setText("Show unevolved");
        unevolvedBox.setEnabled(false);
        unevolvedBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unevolvedBoxActionPerformed(evt);
            }
        });

        creatablePkmnList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        creatablePkmnList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                creatablePkmnListValueChanged(evt);
            }
        });
        pkmnPane.setViewportView(creatablePkmnList);

        org.jdesktop.layout.GroupLayout pkmnPanelLayout = new org.jdesktop.layout.GroupLayout(pkmnPanel);
        pkmnPanel.setLayout(pkmnPanelLayout);
        pkmnPanelLayout.setHorizontalGroup(
            pkmnPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pkmnPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(pkmnPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, unevolvedBox)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, pkmnRandomlyButton)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, pkmnFromListButton))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, pkmnPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
        );
        pkmnPanelLayout.setVerticalGroup(
            pkmnPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pkmnPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(unevolvedBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pkmnRandomlyButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pkmnFromListButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pkmnPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE))
        );

        teamButtonGroup.add(moveRandomlyButton);
        moveRandomlyButton.setText("Select randomly");
        moveRandomlyButton.setEnabled(false);
        moveRandomlyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveRandomlyButtonActionPerformed(evt);
            }
        });

        teamButtonGroup.add(moveFromListButton);
        moveFromListButton.setSelected(true);
        moveFromListButton.setText("Select from list");
        moveFromListButton.setEnabled(false);
        moveFromListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveFromListButtonActionPerformed(evt);
            }
        });

        nicknameField.setEnabled(false);

        nicknameLabel.setText("Nickname");

        jScrollPane1.setViewportView(learnableMovesTable1);

        org.jdesktop.layout.GroupLayout movePanelLayout = new org.jdesktop.layout.GroupLayout(movePanel);
        movePanel.setLayout(movePanelLayout);
        movePanelLayout.setHorizontalGroup(
            movePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(movePanelLayout.createSequentialGroup()
                .add(movePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(nicknameLabel)
                    .add(nicknameField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(movePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(moveFromListButton)
                    .add(moveRandomlyButton))
                .addContainerGap())
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
        );
        movePanelLayout.setVerticalGroup(
            movePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(movePanelLayout.createSequentialGroup()
                .add(movePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(moveRandomlyButton)
                    .add(nicknameLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(movePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(moveFromListButton)
                    .add(nicknameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout makePkmnPanelLayout = new org.jdesktop.layout.GroupLayout(makePkmnPanel);
        makePkmnPanel.setLayout(makePkmnPanelLayout);
        makePkmnPanelLayout.setHorizontalGroup(
            makePkmnPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(makePkmnPanelLayout.createSequentialGroup()
                .add(pkmnPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(movePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(selectionPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        makePkmnPanelLayout.setVerticalGroup(
            makePkmnPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, makePkmnPanelLayout.createSequentialGroup()
                .add(makePkmnPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(movePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(pkmnPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(selectionPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        tabbedPanel.addTab("Make a PKMN", makePkmnPanel);

        formTeamButton.setText("Form Team From Selected");
        formTeamButton.setEnabled(false);
        formTeamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formTeamButtonActionPerformed(evt);
            }
        });

        randomTeamButton.setText("Create New Random Team");
        randomTeamButton.setEnabled(false);
        randomTeamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomTeamButtonActionPerformed(evt);
            }
        });

        starterLabel.setText("Starter");

        deletePkmnButton.setText("Delete PKMN");
        deletePkmnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePkmnButtonActionPerformed(evt);
            }
        });

        deleteTeamButton.setText("Delete Team");
        deleteTeamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTeamButtonActionPerformed(evt);
            }
        });

        availablePkmnTable.addTeamAssembledListener(new openpkmnclient.TeamAssembledListener() {
            public void teamAssembled(openpkmnclient.TeamAssembledListener.TeamAssembledEvent evt) {
                availablePkmnTableTeamAssembled(evt);
            }
        });
        availablePkmnPane.setViewportView(availablePkmnTable);

        org.jdesktop.layout.GroupLayout availablePkmnPanelLayout = new org.jdesktop.layout.GroupLayout(availablePkmnPanel);
        availablePkmnPanel.setLayout(availablePkmnPanelLayout);
        availablePkmnPanelLayout.setHorizontalGroup(
            availablePkmnPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, availablePkmnPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE)
        );
        availablePkmnPanelLayout.setVerticalGroup(
            availablePkmnPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, availablePkmnPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
        );

        availableTeamsTable.addTeamSelectedListener(new openpkmnclient.TeamSelectedListener() {
            public void selectedTeamChanged(openpkmnclient.TeamSelectedListener.TeamSelectedEvent evt) {
                availableTeamsTableSelectedTeamChanged(evt);
            }
        });
        availableTeamsPane.setViewportView(availableTeamsTable);

        org.jdesktop.layout.GroupLayout availableTeamsPanelLayout = new org.jdesktop.layout.GroupLayout(availableTeamsPanel);
        availableTeamsPanel.setLayout(availableTeamsPanelLayout);
        availableTeamsPanelLayout.setHorizontalGroup(
            availableTeamsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(availableTeamsPanelLayout.createSequentialGroup()
                .add(availableTeamsPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE)
                .addContainerGap())
        );
        availableTeamsPanelLayout.setVerticalGroup(
            availableTeamsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, availableTeamsPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
        );

        starterList.setEnabled(false);
        starterList.addStarterSelectedListener(new openpkmnclient.StarterSelectedListener() {
            public void starterSelected(openpkmnclient.StarterSelectedListener.StarterSelectedEvent evt) {
                starterListStarterSelected(evt);
            }
        });

        org.jdesktop.layout.GroupLayout teamFormationPanelLayout = new org.jdesktop.layout.GroupLayout(teamFormationPanel);
        teamFormationPanel.setLayout(teamFormationPanelLayout);
        teamFormationPanelLayout.setHorizontalGroup(
            teamFormationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(teamFormationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(teamFormationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(teamFormationPanelLayout.createSequentialGroup()
                        .add(availablePkmnPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(availableTeamsPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(teamFormationPanelLayout.createSequentialGroup()
                        .add(teamFormationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(teamFormationPanelLayout.createSequentialGroup()
                                .add(starterLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(starterList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 235, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(deleteTeamButton))
                            .add(teamFormationPanelLayout.createSequentialGroup()
                                .add(teamFormationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(formTeamButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(randomTeamButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(deletePkmnButton)))
                        .add(146, 146, 146))))
        );
        teamFormationPanelLayout.setVerticalGroup(
            teamFormationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, teamFormationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(availablePkmnPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(teamFormationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(formTeamButton)
                    .add(deletePkmnButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(randomTeamButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(availableTeamsPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(teamFormationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(starterLabel)
                    .add(starterList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(deleteTeamButton))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout teamsPanelLayout = new org.jdesktop.layout.GroupLayout(teamsPanel);
        teamsPanel.setLayout(teamsPanelLayout);
        teamsPanelLayout.setHorizontalGroup(
            teamsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(teamFormationPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        teamsPanelLayout.setVerticalGroup(
            teamsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(teamFormationPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        tabbedPanel.addTab("Manage Teams", teamsPanel);

        usersTable.addUserSelectedListener(new openpkmnclient.UserSelectedListener() {
            public void userSelected(openpkmnclient.UserSelectedListener.UserSelectedEvent evt) {
                usersTableUserSelected(evt);
            }
        });
        usersPane.setViewportView(usersTable);

        org.jdesktop.layout.GroupLayout usersPanelLayout = new org.jdesktop.layout.GroupLayout(usersPanel);
        usersPanel.setLayout(usersPanelLayout);
        usersPanelLayout.setHorizontalGroup(
            usersPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(usersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(usersPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                .addContainerGap())
        );
        usersPanelLayout.setVerticalGroup(
            usersPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(usersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(usersPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                .addContainerGap())
        );

        batteNowLabel.setText("Battle now!");

        findBattleButton.setText("Find Battle");
        findBattleButton.setEnabled(false);

        findRandomBattleButton.setText("Find Random Battle");
        findRandomBattleButton.setEnabled(false);

        moreSpecificLabel.setText("Arrange a Battle");

        waitButton.setText("Wait for a Challenge");
        waitButton.setEnabled(false);

        challengeButton.setText("Challenge Selected User");
        challengeButton.setEnabled(false);

        org.jdesktop.layout.GroupLayout controlsPanelLayout = new org.jdesktop.layout.GroupLayout(controlsPanel);
        controlsPanel.setLayout(controlsPanelLayout);
        controlsPanelLayout.setHorizontalGroup(
            controlsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(controlsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(controlsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(batteNowLabel)
                    .add(findBattleButton)
                    .add(findRandomBattleButton)
                    .add(moreSpecificLabel)
                    .add(waitButton)
                    .add(challengeButton))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        controlsPanelLayout.setVerticalGroup(
            controlsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(controlsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(batteNowLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(findBattleButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(findRandomBattleButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(moreSpecificLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(waitButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(challengeButton)
                .addContainerGap(386, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout findBattlePanelLayout = new org.jdesktop.layout.GroupLayout(findBattlePanel);
        findBattlePanel.setLayout(findBattlePanelLayout);
        findBattlePanelLayout.setHorizontalGroup(
            findBattlePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, findBattlePanelLayout.createSequentialGroup()
                .add(usersPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(controlsPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        findBattlePanelLayout.setVerticalGroup(
            findBattlePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(usersPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(controlsPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        tabbedPanel.addTab("Find a Battle", findBattlePanel);

        opponentPkmnPanel.setBackground(new java.awt.Color(255, 255, 255));
        opponentPkmnPanel.setMinimumSize(new java.awt.Dimension(0, 102));

        opponentLabel.setText("opponentPkmnName");

        opponentStatus.setText("NRM");

        opponentLevel.setText("Level ###");

        opponentHPLabel.setText("HP");

        opponentIcon.setText("pkmnIcon1");
        opponentIcon.setMaximumSize(new java.awt.Dimension(56, 56));
        opponentIcon.setMinimumSize(new java.awt.Dimension(56, 56));
        opponentIcon.setPreferredSize(new java.awt.Dimension(56, 56));

        org.jdesktop.layout.GroupLayout opponentPkmnPanelLayout = new org.jdesktop.layout.GroupLayout(opponentPkmnPanel);
        opponentPkmnPanel.setLayout(opponentPkmnPanelLayout);
        opponentPkmnPanelLayout.setHorizontalGroup(
            opponentPkmnPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(opponentPkmnPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(opponentPkmnPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(opponentLabel)
                    .add(opponentPkmnPanelLayout.createSequentialGroup()
                        .add(opponentPkmnPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(opponentStatus)
                            .add(opponentHPLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(opponentPkmnPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(opponentLevel)
                            .add(opponentHPBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 285, Short.MAX_VALUE)
                .add(opponentPkmnPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(ballsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(opponentIcon, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        opponentPkmnPanelLayout.setVerticalGroup(
            opponentPkmnPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(opponentPkmnPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(opponentPkmnPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(opponentPkmnPanelLayout.createSequentialGroup()
                        .add(ballsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(opponentIcon, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(opponentPkmnPanelLayout.createSequentialGroup()
                        .add(opponentLabel)
                        .add(12, 12, 12)
                        .add(opponentPkmnPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(opponentLevel)
                            .add(opponentStatus))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(opponentPkmnPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(opponentHPLabel)
                            .add(opponentHPBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        battlePkmnPanel.setBackground(new java.awt.Color(255, 255, 255));

        pkmnName.setText("pkmnName");

        pkmnLevel.setText("Level ###");

        pkmnStatus.setText("NRM");

        pkmnHPFraction.setText("###/###");

        pkmnHPLabel.setText("HP");

        pkmnIcon.setText("pkmnIcon1");
        pkmnIcon.setMaximumSize(new java.awt.Dimension(56, 56));
        pkmnIcon.setMinimumSize(new java.awt.Dimension(56, 56));
        pkmnIcon.setPreferredSize(new java.awt.Dimension(56, 56));

        org.jdesktop.layout.GroupLayout battlePkmnPanelLayout = new org.jdesktop.layout.GroupLayout(battlePkmnPanel);
        battlePkmnPanel.setLayout(battlePkmnPanelLayout);
        battlePkmnPanelLayout.setHorizontalGroup(
            battlePkmnPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, battlePkmnPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(battlePkmnPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, pkmnName)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, battlePkmnPanelLayout.createSequentialGroup()
                        .add(pkmnStatus)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pkmnLevel))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, battlePkmnPanelLayout.createSequentialGroup()
                        .add(pkmnIcon, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 403, Short.MAX_VALUE)
                        .add(battlePkmnPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(pkmnHPFraction)
                            .add(battlePkmnPanelLayout.createSequentialGroup()
                                .add(pkmnHPLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(pkmnHPBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        battlePkmnPanelLayout.setVerticalGroup(
            battlePkmnPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(battlePkmnPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(pkmnName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(battlePkmnPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(pkmnLevel)
                    .add(pkmnStatus))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(battlePkmnPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pkmnHPLabel)
                    .add(battlePkmnPanelLayout.createSequentialGroup()
                        .add(pkmnHPBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pkmnHPFraction)))
                .addContainerGap(32, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, battlePkmnPanelLayout.createSequentialGroup()
                .addContainerGap(55, Short.MAX_VALUE)
                .add(pkmnIcon, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        attackButton.setText("Attack");
        attackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attackButtonActionPerformed(evt);
            }
        });

        battleMovesPane.setViewportView(battleMovesTable);

        org.jdesktop.layout.GroupLayout battleMovesPanelLayout = new org.jdesktop.layout.GroupLayout(battleMovesPanel);
        battleMovesPanel.setLayout(battleMovesPanelLayout);
        battleMovesPanelLayout.setHorizontalGroup(
            battleMovesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(battleMovesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                .add(attackButton)
                .add(battleMovesPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE))
        );
        battleMovesPanelLayout.setVerticalGroup(
            battleMovesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, battleMovesPanelLayout.createSequentialGroup()
                .add(battleMovesPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(attackButton))
        );

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        switchButton.setText("Switch");
        switchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchButtonActionPerformed(evt);
            }
        });

        battleSwitchPane.setViewportView(battleSwitchTable);

        org.jdesktop.layout.GroupLayout battleSwitchPanelLayout = new org.jdesktop.layout.GroupLayout(battleSwitchPanel);
        battleSwitchPanel.setLayout(battleSwitchPanelLayout);
        battleSwitchPanelLayout.setHorizontalGroup(
            battleSwitchPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, battleSwitchPanelLayout.createSequentialGroup()
                .add(battleSwitchPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(battleSwitchPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, switchButton)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, runButton)))
        );
        battleSwitchPanelLayout.setVerticalGroup(
            battleSwitchPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(battleSwitchPanelLayout.createSequentialGroup()
                .add(switchButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 74, Short.MAX_VALUE)
                .add(runButton))
            .add(battleSwitchPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
        );

        messageArea.setColumns(20);
        messageArea.setRows(5);
        messageArea.setMinimumSize(new java.awt.Dimension(230, 85));
        messageArea.setEditable(false);
        messageAreaPane.setViewportView(messageArea);

        org.jdesktop.layout.GroupLayout battlePanelLayout = new org.jdesktop.layout.GroupLayout(battlePanel);
        battlePanel.setLayout(battlePanelLayout);
        battlePanelLayout.setHorizontalGroup(
            battlePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(battleSwitchPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, opponentPkmnPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, battlePkmnPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, battlePanelLayout.createSequentialGroup()
                .add(messageAreaPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(battleMovesPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        battlePanelLayout.setVerticalGroup(
            battlePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(battlePanelLayout.createSequentialGroup()
                .add(opponentPkmnPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 99, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(battlePkmnPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(battlePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(messageAreaPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .add(battleMovesPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(battleSwitchPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        tabbedPanel.addTab("Battle!", battlePanel);

        chatArea.setColumns(20);
        chatArea.setEditable(false);
        chatArea.setLineWrap(true);
        chatArea.setRows(5);
        chatArea.setWrapStyleWord(true);
        chatArea.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        chatAreaPane.setViewportView(chatArea);

        chatUsersTable.setRowSelectionAllowed(false);
        chatUsersPane.setViewportView(chatUsersTable);

        chatTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                chatTextFieldKeyPressed(evt);
            }
        });

        recipientMenu.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Broadcast", "Selected Only" }));
        recipientMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recipientMenuActionPerformed(evt);
            }
        });

        textToLabel.setText("Send text to:");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(chatTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE))
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .add(textToLabel)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(recipientMenu, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .add(chatAreaPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 352, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
            .add(chatUsersPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .add(chatUsersPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(recipientMenu, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(textToLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(chatAreaPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 320, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(chatTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(19, 19, 19))
        );

        currentStatusTitleLabel.setText("Current status:");

        selectedTeamTitleLabel.setText("Selected team:");

        currentRulesTitleLabel.setText("Current rules:");

        currentRulesLabel.setText("No rules selected.");

        selectedStarterLabel.setText("Please select a team.");

        selectedTeamRulesLabel.setText("Please select a team.");

        selectedStarterTitleLabel.setText("Starter:");

        selectedTeamRulesTitleLabel.setText("Team rules:");

        currentStatusLabel.setText("Status not set.");

        selectedTeamLabel.setText("Please select a team.");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(currentRulesTitleLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(currentRulesLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 218, Short.MAX_VALUE)
                .add(selectedStarterTitleLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(selectedStarterLabel))
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(currentStatusTitleLabel)
                    .add(selectedTeamTitleLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(currentStatusLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 203, Short.MAX_VALUE)
                        .add(selectedTeamRulesTitleLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(selectedTeamRulesLabel))
                    .add(selectedTeamLabel)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(currentRulesTitleLabel)
                    .add(selectedStarterLabel)
                    .add(currentRulesLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(selectedStarterTitleLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(currentStatusTitleLabel)
                    .add(currentStatusLabel)
                    .add(selectedTeamRulesLabel)
                    .add(selectedTeamRulesTitleLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(selectedTeamTitleLabel)
                    .add(selectedTeamLabel))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(tabbedPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 667, Short.MAX_VALUE)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tabbedPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 591, Short.MAX_VALUE))
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void manualInitComponents() {
        moveSelectionPolicyChangedListeners =
                new ArrayList<MoveSelectionPolicyChangedListener>();
        // We don't want annonymous listeners, so we add these guys manually
        availableTeamsTable.addTeamSelectedListener(availablePkmnTable);
        availablePkmnTable.addTeamAssembledListener(starterList);
        rulesTable.addRulesTableUpdatedListener(learnableMovesTable1);
        creatablePkmnList.addCreatablePkmnChangedListener(learnableMovesTable1);
        this.addMoveSelectionPolicyChangedListener(learnableMovesTable1);
        /* We want to be able to swap our button between listeners, so no
         * anonymous ones here either */
        waitListener = new WaitListener();
        waitButton.addActionListener(waitListener);
        challengeListener = new ChallengeListener();
        challengeButton.addActionListener(challengeListener);
        findBattleListener = new FindBattleListener();
        findBattleButton.addActionListener(findBattleListener);
        cancelListener = new CancelListener();
    }

    private void pkmnRandomlyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pkmnRandomlyButtonActionPerformed
        selectRandomPkmnAndDisable();

//        learnableMovesList.updatePkmnId(creatablePkmnList.getSelectedPkmnId());
        if (moveRandomlyButton.isSelected()) {
            selectRandomMovesAndDisable();
        } else {
            clearMovesAndEnable();
        }
}//GEN-LAST:event_pkmnRandomlyButtonActionPerformed

    public void addMoveSelectionPolicyChangedListener(MoveSelectionPolicyChangedListener l) {
        moveSelectionPolicyChangedListeners.add(l);
    }

    public void removeMoveSelectionPolicyChangedListener(MoveSelectionPolicyChangedListener l) {
        moveSelectionPolicyChangedListeners.remove(l);
    }

    public void fireMoveSelectionPolicyChanged(MoveSelectionPolicyChangedEvent e) {
        for (MoveSelectionPolicyChangedListener l :
                moveSelectionPolicyChangedListeners) {
            l.moveSelectionPolicyChanged(e);
        }
    }

    private void pkmnFromListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pkmnFromListButtonActionPerformed
        creatablePkmnList.clearSelection();
        creatablePkmnList.setEnabled(true);

        moveRandomlyButton.setEnabled(false);
        moveFromListButton.setEnabled(false);

//        learnableMovesList.setEnabled(false);
//        learnableMovesList.clearSelection();
//        learnableMovesList.updatePkmnId(-1);
}//GEN-LAST:event_pkmnFromListButtonActionPerformed

    private void logoutOnClose(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_logoutOnClose
        guiLogout();
    }//GEN-LAST:event_logoutOnClose

    private void unevolvedBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unevolvedBoxActionPerformed
        creatablePkmnList.updateFullyEvolved(!unevolvedBox.isSelected());
        if (pkmnRandomlyButton.isSelected()) {
            selectRandomPkmnAndDisable();
//            learnableMovesList.updatePkmnId(creatablePkmnList.getSelectedPkmnId());
            if (moveRandomlyButton.isSelected()) {
                selectRandomMovesAndDisable();
            } else {
                clearMovesAndEnable();
            }
        } else {
            clearPkmnAndEnable();
        }
    }//GEN-LAST:event_unevolvedBoxActionPerformed

    private void moveFromListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveFromListButtonActionPerformed
        this.fireMoveSelectionPolicyChanged(
                new MoveSelectionPolicyChangedEvent(this, Policy.SELECTED));
    }//GEN-LAST:event_moveFromListButtonActionPerformed

    private void moveRandomlyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveRandomlyButtonActionPerformed
        this.fireMoveSelectionPolicyChanged(
                new MoveSelectionPolicyChangedEvent(this, Policy.RANDOM));
    }//GEN-LAST:event_moveRandomlyButtonActionPerformed

    private void rulesTableRulesTableUpdated(openpkmnclient.RulesTableUpdatedListener.RulesTableUpdatedEvent evt) {//GEN-FIRST:event_rulesTableRulesTableUpdated
        updateRules(evt.getRules());
    }//GEN-LAST:event_rulesTableRulesTableUpdated

    private void creatablePkmnListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_creatablePkmnListValueChanged
        enableMoveSelectionMechanismControls();
        if (moveRandomlyButton.isSelected()) {
            selectRandomMovesAndDisable();
        } else {
            clearMovesAndEnable();
        }
    }//GEN-LAST:event_creatablePkmnListValueChanged

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed

        SwingWorker s = new SwingWorker<List<AvailablePkmn>, Void>() {

            final int createdId = creatablePkmnList.getSelectedPkmnId();

            @Override
            protected List<AvailablePkmn> doInBackground()
                    throws Exception {

                return mainController.doPkmnSend(nicknameField.getText(),
                        createdId, learnableMovesTable1.getSelectedMoves(),
                        levelBox.getText(), useDV.isSelected(),
                        attackBox.getText(), useDV.isSelected(),
                        defenseBox.getText(), useDV.isSelected(),
                        speedBox.getText(), useDV.isSelected(),
                        specialBox.getText(), hpBox.getText());
            }

            @Override
            protected void done() {
                try {
                    List<AvailablePkmn> availablePkmn = get();
                    if (availablePkmn != null) {
                        informationLabel.setText(Lexicon.pkmnNames[createdId]
                                + " was created.");
                        availablePkmnTable.load(availablePkmn);
                    } else {
                        displayError("Getting available pkmn");
                    }
                } catch (InterruptedException ex) {
                    displayError("Getting available pkmn"
                            + ex.getLocalizedMessage());
                } catch (ExecutionException ex) {
                    displayError("Getting available pkmn"
                            + ex.getLocalizedMessage());
                }
            }
        };
        s.execute();
    }//GEN-LAST:event_createButtonActionPerformed

    private void formTeamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formTeamButtonActionPerformed
        SwingWorker s = new SwingWorker<List<AvailableTeam>, Void>() {

            @Override
            protected List<AvailableTeam> doInBackground()
                    throws Exception {
                Collection<Integer> members =
                        availablePkmnTable.getSelectedIds();
                return mainController.doFormTeam(members);
            }

            @Override
            protected void done() {
                try {
                    List<AvailableTeam> availableTeams = get();
                    if (availableTeams != null) {
                        availableTeamsTable.load(availableTeams);
                    } else {
                        displayError("Form team");
                    }
                } catch (InterruptedException ex) {
                    displayError("Form team "
                            + ex.getLocalizedMessage());
                } catch (ExecutionException ex) {
                    displayError("Form team "
                            + ex.getLocalizedMessage());
                }
            }
        };
        s.execute();
    }//GEN-LAST:event_formTeamButtonActionPerformed

    private void randomTeamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomTeamButtonActionPerformed
        SwingWorker s = new SwingWorker<MainController.TeamAndPkmnUpdater, Void>() {

            @Override
            protected MainController.TeamAndPkmnUpdater doInBackground()
                    throws Exception {
                return mainController.doSendRandomTeam(
                        ((RulesTable) rulesTable).getSelectedRules());
            }

            @Override
            protected void done() {
                try {
                    MainController.TeamAndPkmnUpdater updater = get();
                    if (updater != null) {
                        availablePkmnTable.load(updater.getAvailablePkmn());
                        availableTeamsTable.load(updater.getAvailableTeams());
                    } else {
                        displayError("Sending random team");
                    }
                } catch (InterruptedException ex) {
                    displayError("Sending random team"
                            + ex.getLocalizedMessage());
                } catch (ExecutionException ex) {
                    displayError("Sending random team"
                            + ex.getLocalizedMessage());
                }
            }
        };
        s.execute();
    }//GEN-LAST:event_randomTeamButtonActionPerformed

    private void availableTeamsTableSelectedTeamChanged(openpkmnclient.TeamSelectedListener.TeamSelectedEvent evt) {//GEN-FIRST:event_availableTeamsTableSelectedTeamChanged
        if (evt.getTeamRules() == null) {
            selectedTeamLabel.setText("Please select a team");
            selectedTeamRulesLabel.setText("Please select a team");
            selectedStarterLabel.setText("Please select a team");
        } else {
            selectedTeamLabel.setText(Integer.toString(evt.getSelectedTeams().
                    get(0)));
            selectedTeamRulesLabel.setText(evt.getTeamRules());
            selectedStarterLabel.setText("Please select a starter");
        }

        findBattleButton.setEnabled(false);
        waitButton.setEnabled(false);
        challengeButton.setEnabled(false);
    }//GEN-LAST:event_availableTeamsTableSelectedTeamChanged

    private void starterListStarterSelected(openpkmnclient.StarterSelectedListener.StarterSelectedEvent evt) {//GEN-FIRST:event_starterListStarterSelected
        if (evt.getId() != -1) {
            selectedStarterLabel.setText(evt.getName() + " (" + evt.getId() + ")");
            waitButton.setEnabled(true);
            findBattleButton.setEnabled(true);
        } else {
        }
    }//GEN-LAST:event_starterListStarterSelected

    private void usersTableUserSelected(openpkmnclient.UserSelectedListener.UserSelectedEvent evt) {//GEN-FIRST:event_usersTableUserSelected
        if (mainModel.getStatus().equals(Status.LOGGED_IN)) {
            EnumSet<Rule> theirRules =
                    Rule.getRuleSetFromValue(evt.getUserRules());
            EnumSet<Rule> theirTeamRules =
                    Rule.getRuleSetFromValue(evt.getTeamRules());
            EnumSet<Rule> myRules = rulesTable.getSelectedRules();
            EnumSet<Rule> myTeamRules = Rule.getRuleSetFromValue(
                    availableTeamsTable.getSelectedTeamRules());
            String name = evt.getUserName();

            if (!evt.getStatus().equals(Status.WAITING)) {
                challengeButton.setEnabled(false);
            } else if (myTeamRules == null) {
                challengeButton.setEnabled(false);
            } else if (starterList.getSelectedId() == -1) {
                challengeButton.setEnabled(false);
                challengeButton.setText(name + " is not Waiting!");
            } else {
                evaluateCompatibility(theirRules, theirTeamRules, myRules,
                        myTeamRules, name);
            }
        }
    }//GEN-LAST:event_usersTableUserSelected

    private void attackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attackButtonActionPerformed
        disableBattleButtons();
        SwingWorker s =
                new SwingWorker<MainController.BattleData, Void>() {

                    @Override
                    protected MainController.BattleData doInBackground()
                            throws Exception {
                        return mainController.doTurn(
                                MainController.BattleCommand.Attacking.ordinal(),
                                battleMovesTable.getSelectedRow());
                    }

                    @Override
                    protected void done() {
                        try {
                            MainController.BattleData data = get();
                            displayServerStatus(data.getServerStatus(),
                                    data.getEventLog());
                        } catch (InterruptedException ex) {
                            System.err.println(ex);
                        } catch (ExecutionException ex) {
                            System.err.println(ex);
                        }
                    }
                };
        s.execute();
}//GEN-LAST:event_attackButtonActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        disableBattleButtons();
        SwingWorker s =
                new SwingWorker<MainController.BattleData, Void>() {

                    @Override
                    protected MainController.BattleData doInBackground()
                            throws Exception {
                        return mainController.doTurn(
                                MainController.BattleCommand.Running.ordinal(),
                                0);
                    }

                    @Override
                    protected void done() {
                        try {
                            MainController.BattleData data = get();
                            displayServerStatus(data.getServerStatus(),
                                    data.getEventLog());
                        } catch (InterruptedException ex) {
                            System.err.println(ex);
                        } catch (ExecutionException ex) {
                            System.err.println(ex);
                        }
                    }
                };
        s.execute();
}//GEN-LAST:event_runButtonActionPerformed

    private void switchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchButtonActionPerformed
        disableBattleButtons();
        SwingWorker s =
                new SwingWorker<MainController.BattleData, Void>() {

                    @Override
                    protected MainController.BattleData doInBackground()
                            throws Exception {
                        return mainController.doTurn(
                                MainController.BattleCommand.Switching.ordinal(),
                                battleSwitchTable.getSelectedRow());
                    }

                    @Override
                    protected void done() {
                        try {
                            MainController.BattleData data = get();
                            displayServerStatus(data.getServerStatus(),
                                    data.getEventLog());
                        } catch (InterruptedException ex) {
                            System.err.println(ex);
                        } catch (ExecutionException ex) {
                            System.err.println(ex);
                        }
                    }
                };
        s.execute();
}//GEN-LAST:event_switchButtonActionPerformed

    private void availablePkmnTableTeamAssembled(openpkmnclient.TeamAssembledListener.TeamAssembledEvent evt) {//GEN-FIRST:event_availablePkmnTableTeamAssembled
        // TODO add your handling code here:
    }//GEN-LAST:event_availablePkmnTableTeamAssembled

    private void chatTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chatTextFieldKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_ENTER) {
            final String chatText = chatTextField.getText();
            if (!chatText.equals("")) {
                SwingWorker s = new SwingWorker<Boolean, Void>() {

                    @Override
                    protected Boolean doInBackground() throws Exception {
                        mainController.doSendChatMessage(chatText,
                                recipientMenu.getSelectedIndex(),
                                chatUsersTable.getRecipientIds());
                        return true;
                    }

                    @Override
                    protected void done() {
                        try {
                            boolean success = get();
                            if (success) {
                                chatTextField.setText("");
                            }
                        } catch (InterruptedException ex) {
                            System.err.println(ex);
                        } catch (ExecutionException ex) {
                            System.err.println(ex);
                        }
                    }
                };
                s.execute();
            }
        }
    }//GEN-LAST:event_chatTextFieldKeyPressed

    private void recipientMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recipientMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_recipientMenuActionPerformed

    private void deletePkmnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePkmnButtonActionPerformed
        SwingWorker s = new SwingWorker<MainController.TeamAndPkmnUpdater, Void>() {

            @Override
            protected MainController.TeamAndPkmnUpdater doInBackground()
                    throws Exception {
                TeamAndPkmnUpdater u = null;
                List<Integer> ids = availablePkmnTable.getSelectedIds();
                for (int id : ids) {
                    u = mainController.doDeletePkmn(id);
                }
                return u;
            }

            @Override
            protected void done() {
                try {
                    TeamAndPkmnUpdater updater = get();
                    if (updater != null) {
                        availablePkmnTable.load(updater.getAvailablePkmn());
                        availableTeamsTable.load(updater.getAvailableTeams());
                    } else {
                        displayError("deleting pkmn");
                    }
                } catch (InterruptedException ex) {
                    displayError("deleting pkmn"
                            + ex.getLocalizedMessage());
                } catch (ExecutionException ex) {
                    displayError("deleting pkmn"
                            + ex.getLocalizedMessage());
                }
            }
        };
        s.execute();
    }//GEN-LAST:event_deletePkmnButtonActionPerformed

    private void deleteTeamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTeamButtonActionPerformed
        SwingWorker s = new SwingWorker<MainController.TeamAndPkmnUpdater, Void>() {

            @Override
            protected MainController.TeamAndPkmnUpdater doInBackground()
                    throws Exception {
                TeamAndPkmnUpdater u = null;
                Collection<Integer> selectedTeamIds = availableTeamsTable.getSelectedTeamIds();
                for (int id : selectedTeamIds) {
                    u = mainController.doDeleteTeam(id);
                }
                return u;
            }

            @Override
            protected void done() {
                try {
                    TeamAndPkmnUpdater updater = get();
                    if (updater != null) {
                        availablePkmnTable.load(updater.getAvailablePkmn());
                        availableTeamsTable.load(updater.getAvailableTeams());
                    } else {
                        displayError("deleting team");
                    }
                } catch (InterruptedException ex) {
                    displayError("deleting team"
                            + ex.getLocalizedMessage());
                } catch (ExecutionException ex) {
                    displayError("deleting team"
                            + ex.getLocalizedMessage());
                }
            }
        };
        s.execute();
    }//GEN-LAST:event_deleteTeamButtonActionPerformed

    private void attackBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attackBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_attackBoxActionPerformed

    private void evaluateCompatibility(EnumSet<Rule> theirRules,
            EnumSet<Rule> theirTeamRules, EnumSet<Rule> myRules,
            EnumSet<Rule> myTeamRules, String userName) {
        boolean compatible = true;
        EnumSet<Rule> userToUserRules = Rule.getUserToUserRules();
        EnumSet<Rule> userToTeamRules = Rule.getUserToTeamRules();

        for (Rule r : userToUserRules) {
            if (theirRules.contains(r) != myRules.contains(r)) {
                compatible = false;
                disableChallengeButtonWithReason(r);
                break;
            }
        }
        for (Rule r : userToTeamRules) {
            if (!(!myRules.contains(r)
                    || (myRules.contains(r) == theirTeamRules.contains(r)))) {
                compatible = false;
                disableChallengeButtonWithReason(r);
                break;
            }
            if (!(!theirRules.contains(r)
                    || (theirRules.contains(r) == myTeamRules.contains(r)))) {
                compatible = false;
                disableChallengeButtonWithReason(r);
                break;
            }
        }
        if (compatible) {
            enableChallengeButtonWithUser(userName);
        }

    }

    private void disableChallengeButtonWithReason(Rule r) {
        challengeButton.setEnabled(false);
        challengeButton.setText("Incompatible Users (" + r.name + ")");
    }

    private void enableChallengeButtonWithUser(String userName) {
        challengeButton.setText("Challenge " + userName);
        challengeButton.setEnabled(true);
    }

    public void setModel(BattleModel newModel) {
        battleModel = newModel;
        battleModel.addListener(this);
        battleModel.addListener(starterList);
    }

    public void setModel(MainModel newModel) {
        mainModel = newModel;
        mainModel.addStatusChangeListener(this);
    }

    public void setController(MainController m) {
        mainController = m;
    }

    public void loadPkmnTable(List<AvailablePkmn> p) {
        availablePkmnTable.load(p);
    }

    public void loadTeamsTable(List<AvailableTeam> t) {
        availableTeamsTable.load(t);
    }

    public void open(String t) {
        this.setTitle(t);
        this.setVisible(true);

        SwingWorker chatWorker = new SwingWorker<Void, Object>() {

            @Override
            protected Void doInBackground() throws Exception {
                while (true) {
                    publish(mainController.doStateUpdate());
                }
            }

            @Override
            protected void process(List<Object> chunks) {
                for (Object t : chunks) {
                    if (t instanceof ChatText) {
                        if (t != null) {
                            if (!chatUsersTable.isIgnored(((ChatText) t).getUserName())) {
                                chatArea.append(((ChatText) t).getFormattedMessage());
                                chatArea.setCaretPosition(chatArea.getDocument().
                                        getLength());
                            }
                        }
                    } else if (t instanceof AvailableUser) {
                        AvailableUser u = (AvailableUser) t;
                        if (u.isNew()) {
                            chatArea.append("* " + u.getUserName()
                                    + " has joined.\n");
                            chatArea.setCaretPosition(chatArea.getDocument().
                                    getLength());
                        } else if (u.getStatus()
                                == Status.LOGGED_OUT.ordinal()) {
                            chatArea.append("* " + u.getUserName()
                                    + " has left.\n");
                            chatArea.setCaretPosition(chatArea.getDocument().
                                    getLength());
                        }
                        chatUsersTable.updateUser(u);
                        usersTable.updateUser(u);
                    }
                }
            }
        };
        chatWorker.execute();
    }

    public void close() {
        this.setVisible(false);
        if (timer != null) {
            timer.cancel();
            timer = null;
        }
    }

    void loadRules(int rulesValue) {
        ((RulesTable) rulesTable).setRules(rulesValue);
        currentRulesLabel.setText(Rule.getCodeFromValue(rulesValue));
    }

    private void changeButtonModeToCancel(JButton b) {
        b.setText("Cancel");
        b.addActionListener(cancelListener);
    }

    void changeWaitToCancel() {
        for (ActionListener l : waitButton.getActionListeners()) {
            waitButton.removeActionListener(l);
        }
        changeButtonModeToCancel(waitButton);
    }

    void changeFindBattleToCancel() {
        for (ActionListener l : findBattleButton.getActionListeners()) {
            findBattleButton.removeActionListener(l);
        }
        changeButtonModeToCancel(findBattleButton);
    }

    void changeCancelToFindBattle() {
        for (ActionListener l : findBattleButton.getActionListeners()) {
            findBattleButton.removeActionListener(l);
        }
        findBattleButton.setText("Find Battle");
        findBattleButton.addActionListener(findBattleListener);
    }

    void changeCancelToWait() {
        for (ActionListener l : waitButton.getActionListeners()) {
            waitButton.removeActionListener(l);
        }
        waitButton.setText("Wait for a Challenge");
        waitButton.addActionListener(waitListener);
    }

    void enableRuleControls() {
        rulesTable.setEnabled(true);
    }

    void disableRuleControls() {
        rulesTable.setEnabled(false);
    }

    void selectRandomMovesAndDisable() {
//        learnableMovesList.clearSelection();
//        learnableMovesList.setEnabled(false);
//        learnableMovesList.makeRandomSelection();
    }

    void clearMovesAndEnable() {
//        learnableMovesList.clearSelection();
//        learnableMovesList.setEnabled(true);
    }

    void clearPkmnAndEnable() {
        creatablePkmnList.clearSelection();
        creatablePkmnList.setEnabled(true);
    }

    void selectRandomPkmnAndDisable() {
        creatablePkmnList.clearSelection();
        creatablePkmnList.setEnabled(false);
        creatablePkmnList.makeRandomSelection();
    }

    void enableMoveSelectionMechanismControls() {
        moveRandomlyButton.setEnabled(true);
        moveFromListButton.setEnabled(true);
    }

    void disableMoveSelectionMechanismControls() {
        moveRandomlyButton.setEnabled(false);
        moveFromListButton.setEnabled(false);
    }

    void enablePkmnCreationControls() {
        this.nicknameField.setEnabled(true);
        this.unevolvedBox.setEnabled(true);
        this.pkmnFromListButton.setEnabled(true);
        this.pkmnRandomlyButton.setEnabled(true);
        this.creatablePkmnList.setEnabled(true);
        this.useDV.setEnabled(true);
        this.useStat.setEnabled(true);
        this.levelBox.setEnabled(true);
        this.attackBox.setEnabled(true);
        this.defenseBox.setEnabled(true);
        this.speedBox.setEnabled(true);
        this.specialBox.setEnabled(true);
        this.hpBox.setEnabled(true);
        this.createButton.setEnabled(true);
    }

    void disabledPkmnCreationControls() {
        this.nicknameField.setEnabled(false);
        this.unevolvedBox.setEnabled(true);
        this.pkmnFromListButton.setEnabled(false);
        this.pkmnRandomlyButton.setEnabled(false);
        this.useDV.setEnabled(false);
        this.useStat.setEnabled(false);
        this.levelBox.setEnabled(true);
        this.attackBox.setEnabled(false);
        this.defenseBox.setEnabled(false);
        this.speedBox.setEnabled(false);
        this.specialBox.setEnabled(false);
        this.hpBox.setEnabled(false);
        this.createButton.setEnabled(false);
    }

    void enableTeamCreationControls() {
        this.availablePkmnTable.setEnabled(true);
        this.availableTeamsTable.setEnabled(true);
        this.formTeamButton.setEnabled(true);
        this.randomTeamButton.setEnabled(true);
        // do not enable the delete team button, starter list until a team has
        // been selected
    }

    void disableTeamCreationControls() {
        this.availablePkmnTable.setEnabled(false);
        this.availableTeamsTable.setEnabled(false);
        this.formTeamButton.setEnabled(false);
        this.randomTeamButton.setEnabled(false);
        this.deletePkmnButton.setEnabled(false);
        this.deleteTeamButton.setEnabled(false);
        this.starterList.setEnabled(false);
    }

    void changeChallengeToCancel() {
        for (ActionListener l : challengeButton.getActionListeners()) {
            challengeButton.removeActionListener(l);
        }
        changeButtonModeToCancel(challengeButton);
    }

    void changeCancelToChallenge() {
        for (ActionListener l : challengeButton.getActionListeners()) {
            challengeButton.removeActionListener(l);
        }
        challengeButton.setText("Challenge Selected User");
        challengeButton.addActionListener(challengeListener);
    }

    private void waitForBattle() {
        SwingWorker s = new SwingWorker<BattleAndOpponentData, Void>() {

            @Override
            protected BattleAndOpponentData doInBackground() throws Exception {
                return mainController.doImmediateBattle();
            }

            @Override
            protected void done() {
                try {
                    BattleAndOpponentData battleData = get();

                    if (battleData != null) {
                        /* Make sure we did not cancel the challenge, the server
                         * indicates this to us by saying we are being
                         * challenged by ourself.
                         *
                         * If the cancelation did occur, the cleanup for that
                         * is handled elsewhere, so don't do anything.
                         */
                        String opponentName = battleData.getOpponentName();
                        if (!opponentName.equals(mainModel.getUserName())) {
                            battleModel.setUserName(mainModel.getUserName());
                            battleModel.setOpponentName(opponentName);
                            displayServerStatus(battleData.getServerStatus(),
                                    battleData.getEventLog());
                            mainModel.setStatus(Status.BATTLING, null);
                        }
                    } else {
                        displayError("Waiting for challenge.");
                        mainModel.setStatus(Status.LOGGED_IN, null);
                    }
                } catch (InterruptedException ex) {
                    displayError("Waiting for challenge."
                            + ex.getLocalizedMessage());
                    mainModel.setStatus(Status.LOGGED_IN, null);
                } catch (ExecutionException ex) {
                    displayError("Waiting for challenge."
                            + ex.getLocalizedMessage());
                    mainModel.setStatus(Status.LOGGED_IN, null);
                }
            }
        };
        s.execute();
    }

    public void waitForChallenge() {
        SwingWorker s = new SwingWorker<Integer, Void>() {

            @Override
            protected Integer doInBackground() throws Exception {
                return mainController.doReceiveChallenge();
            }

            @Override
            protected void done() {
                try {
                    int challengerId = get();

                    if (challengerId != -1) {
                        String opponentName =
                                usersTable.getNameById(challengerId);
                        /* Make sure we did not cancel the challenge, the server
                         * indicates this to us by saying we are being
                         * challenged by ourself.
                         *
                         * If the cancelation did occur, the cleanup for that
                         * is handled elsewhere, so don't do anything.
                         */

                        if (!opponentName.equals(mainModel.getUserName())) {
                            showChallengeDialog(opponentName,
                                    usersTable.getRulesById(challengerId),
                                    usersTable.getTeamRulesById(challengerId));
                            mainModel.setStatus(MainModel.Status.CHALLENGED,
                                    null);
                            battleModel.setUserName(mainModel.getUserName());
                            battleModel.setOpponentName(opponentName);
                        }
                    } else {
                        displayError("Waiting for challenge.");
                    }
                } catch (InterruptedException ex) {
                    displayError("Waiting for challenge."
                            + ex.getLocalizedMessage());
                } catch (ExecutionException ex) {
                    displayError("Waiting for challenge."
                            + ex.getLocalizedMessage());
                }
            }
        };
        s.execute();
    }

    public void waitForChallengeResponse() {
        SwingWorker s = new SwingWorker<MainController.BattleData, Void>() {

            @Override
            protected MainController.BattleData doInBackground()
                    throws Exception {
                return mainController.doReceiveChallengeResponse();
            }

            @Override
            protected void done() {
                try {
                    MainController.BattleData serverStatus = get();

                    if (serverStatus != null) {
                        /* A rejected challenge will send back a BattleStatus
                         * with a null server status.
                         */
                        if (serverStatus.getServerStatus() == null) {
                            mainModel.setStatus(MainModel.Status.LOGGED_IN,
                                    null);
                        } else {
                            displayServerStatus(serverStatus.getServerStatus(),
                                    serverStatus.getEventLog());
                            mainModel.setStatus(MainModel.Status.BATTLING,
                                    null);
                        }
                    } else {
                        displayError("Waiting for challenge response.");
                        mainModel.setStatus(Status.LOGGED_IN, null);
                    }
                } catch (InterruptedException ex) {
                    displayError("Waiting for challenge response. "
                            + ex.getLocalizedMessage());
                    mainModel.setStatus(Status.LOGGED_IN, null);
                } catch (ExecutionException ex) {
                    displayError("Waiting for challenge response. "
                            + ex.getLocalizedMessage());
                    mainModel.setStatus(Status.LOGGED_IN, null);
                }
            }
        };
        s.execute();
    }

    void showChallengeDialog(String challenger, String userRules,
            String teamRules) {
        int value = JOptionPane.showConfirmDialog(this, challenger
                + " (user rules: " + userRules + " team rules: " + teamRules
                + ") has challenged you.  Do you accept?", "Challenge",
                JOptionPane.YES_NO_OPTION);

        if (value == (Integer) JOptionPane.YES_OPTION) {
            SwingWorker s = new SwingWorker<MainController.BattleData, Void>() {

                @Override
                protected MainController.BattleData doInBackground() throws
                        Exception {
                    return mainController.doAcceptChallenge();
                }

                @Override
                protected void done() {
                    try {
                        MainController.BattleData serverStatus = get();

                        if (serverStatus != null) {
                            displayServerStatus(serverStatus.getServerStatus(),
                                    serverStatus.getEventLog());
                            mainModel.setStatus(MainModel.Status.BATTLING,
                                    null);
                        } else {
                            displayError("Getting battle status");
                            mainModel.setStatus(Status.LOGGED_IN, null);
                        }
                    } catch (InterruptedException ex) {
                        displayError("Getting battle status"
                                + ex.getLocalizedMessage());
                        mainModel.setStatus(Status.LOGGED_IN, null);
                    } catch (ExecutionException ex) {
                        displayError("Getting battle status"
                                + ex.getLocalizedMessage());
                        mainModel.setStatus(Status.LOGGED_IN, null);
                    }
                }
            };
            s.execute();
        } else {
            SwingWorker s = new SwingWorker<Boolean, Void>() {

                @Override
                protected Boolean doInBackground() throws Exception {
                    return mainController.doRejectChallenge();
                }

                @Override
                protected void done() {
                    try {
                        boolean success = get();

                        mainModel.setStatus(MainModel.Status.LOGGED_IN, null);
                        if (!success) {
                            displayError("Rejecting challenge");
                        }
                    } catch (InterruptedException ex) {
                        displayError("Rejecting challenge"
                                + ex.getLocalizedMessage());
                        mainModel.setStatus(MainModel.Status.LOGGED_IN, null);
                    } catch (ExecutionException ex) {
                        System.err.println(ex);
                        displayError("Rejecting challenge"
                                + ex.getLocalizedMessage());
                        mainModel.setStatus(MainModel.Status.LOGGED_IN, null);
                    }
                }
            };
            s.execute();
        }
    }

    @Override
    public void mainModelStatusChanged(MainModelStatusChangedEvent e) {
        MainModel.Status status = e.getStatus();
        currentStatusLabel.setText(status.getDisplayName());

        if (status == MainModel.Status.BATTLING) {
            tabbedPanel.setEnabledAt(4, true);
            tabbedPanel.setSelectedIndex(4);
        } else if (status == MainModel.Status.AWAITING_RESPONSE) {
            disableRuleControls();
            disableTeamCreationControls();
            changeChallengeToCancel();
            waitForChallengeResponse();
        } else if (status == MainModel.Status.WAITING) {
            disableRuleControls();
            disableTeamCreationControls();
            changeWaitToCancel();
            challengeButton.setEnabled(false);
            findBattleButton.setEnabled(false);
            usersTable.setEnabled(false);
            waitForChallenge();
        } else if (status == MainModel.Status.FINDING_BATTLE) {
            disableRuleControls();
            disableTeamCreationControls();
            changeFindBattleToCancel();
            challengeButton.setEnabled(false);
            usersTable.setEnabled(false);
            waitForBattle();
        } else if (status == MainModel.Status.CHALLENGED) {
            waitButton.setEnabled(false);
            findBattleButton.setEnabled(false);
            challengeButton.setEnabled(false);
        } else if (status == MainModel.Status.LOGGED_IN) {
            if (e.getData() != null) {
                InitialStatus initialStatus = (InitialStatus) e.getData();
                setRules(initialStatus.getRules());
                setAvailablePkmn(initialStatus.getAvailablePkmn());
                setAvailableTeams(initialStatus.getAvailableTeams());
                setAvailableUsers(initialStatus.getAvailableUsers());
            }
            updateCreatablePkmn();
            tabbedPanel.setEnabledAt(4, false);

            this.enableRuleControls();

            this.enablePkmnCreationControls();

            this.enableTeamCreationControls();
            findRandomBattleButton.setEnabled(true);
            usersTable.setEnabled(true);

            if (!isVisible()) {
                this.open("openpkmn - " + mainModel.getUserName());
            }
            this.changeCancelToChallenge();
            this.changeCancelToFindBattle();
            this.changeCancelToWait();
        } else if (status == MainModel.Status.LOGGED_OUT) {
            close();
            System.exit(0);
        }
    }

    @Override
    public void battleModelChanged(BattleModelChangedEvent e) {
        switch (e.getStatus()) {
            case OpponentLoss:
            case OwnLoss:
            case Tie:
                mainModel.setStatus(MainModel.Status.LOGGED_IN, null);
                waitButton.setEnabled(true);
                tabbedPanel.setEnabledAt(4, true);
                disableBattleButtons();
                break;
            case OpponentFaint:
                setAttackButtonToContinue();
                enableBattleButtons();
                disableSwitchButton();
                break;
            case OwnFaint:
            case BothFaint:
                setAttackButtonToAttack();
                enableBattleButtons();
                disableAttackButton();
                break;
            default:
                setAttackButtonToAttack();
                enableBattleButtons();
                break;
        }

    }

    void setRules(int rules) {
        ((RulesTable) rulesTable).setRules(rules);
    }

    void setAvailablePkmn(List<AvailablePkmn> availablePkmn) {
        availablePkmnTable.load(availablePkmn);
    }

    void setAvailableTeams(List<AvailableTeam> availableTeams) {
        availableTeamsTable.load(availableTeams);
    }

    void setAvailableUsers(List<AvailableUser> availableUsers) {
        usersTable.load(availableUsers);
        chatUsersTable.load(availableUsers);
    }

    void setUserName(String userName) {
        mainModel.setUserName(userName);
    }

    void updateCreatablePkmn() {
        creatablePkmnList.updateFullyEvolved(!unevolvedBox.isSelected());
    }

    MainModel getMainModel() {
        return mainModel;
    }

    public class CancelListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent evt) {
            final ActionEvent e = evt;
            SwingWorker s = new SwingWorker<Boolean, Void>() {

                @Override
                protected Boolean doInBackground() throws Exception {
                    return mainController.doCancel();
                }

                @Override
                protected void done() {
                    try {
                        boolean success = get();
                        if (success) {
                            if (e.getSource().equals(waitButton)) {
                                changeCancelToWait();
                            } else if (e.getSource().equals(challengeButton)) {
                                changeCancelToChallenge();
                            } else if (e.getSource().equals(findBattleButton)) {
                                changeCancelToFindBattle();
                            }
                            mainModel.setStatus(MainModel.Status.LOGGED_IN,
                                    null);
                            /* we know a team has been selected, so we can
                             * enable the starter list, which is not enabled
                             * on LOGGED_IN status
                             */
                            starterList.setEnabled(true);
                        } else {
                            displayError("Cancelling challenge/wait");
                        }
                    } catch (InterruptedException ex) {
                        displayError("Cancelling challenge/wait"
                                + ex.getLocalizedMessage());
                    } catch (ExecutionException ex) {
                        displayError("Cancelling challenge/wait"
                                + ex.getLocalizedMessage());
                    }
                }
            };
            s.execute();
        }
    }

    public class WaitListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent arg0) {
            final int teamId = availableTeamsTable.getSelectedTeamIds().get(0);
            final int starterId = ((StarterList) starterList).getSelectedId();
            SwingWorker s = new SwingWorker<Boolean, Void>() {

                @Override
                protected Boolean doInBackground() throws Exception {
                    return mainController.doWait(teamId, starterId);
                }

                @Override
                protected void done() {
                    try {
                        boolean success = get();
                        if (success) {
                            changeWaitToCancel();
                            mainModel.setStatus(MainModel.Status.WAITING, null);
                        } else {
                            displayError("Waiting");
                        }
                    } catch (InterruptedException ex) {
                        displayError("Waiting"
                                + ex.getLocalizedMessage());
                    } catch (ExecutionException ex) {
                        displayError("Waiting"
                                + ex.getLocalizedMessage());
                    }
                }
            };
            s.execute();

        }
    }

    public class FindBattleListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent arg0) {
            final int teamId = availableTeamsTable.getSelectedTeamIds().get(0);
            final int starterId = ((StarterList) starterList).getSelectedId();
            SwingWorker s = new SwingWorker<Boolean, Void>() {

                @Override
                protected Boolean doInBackground() throws Exception {
                    return mainController.doFindBattle(teamId, starterId);
                }

                @Override
                protected void done() {
                    try {
                        boolean success = get();
                        if (success) {
                            changeFindBattleToCancel();
                            mainModel.setStatus(MainModel.Status.FINDING_BATTLE,
                                    null);
                        } else {
                            displayError("Waiting");
                        }
                    } catch (InterruptedException ex) {
                        displayError("Waiting" + ex.getLocalizedMessage());
                    } catch (ExecutionException ex) {
                        displayError("Waiting" + ex.getLocalizedMessage());
                    }
                }
            };
            s.execute();

        }
    }

    public class ChallengeListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent arg0) {
            final int teamId = availableTeamsTable.getSelectedTeamIds().get(0);
            final int starter = starterList.getSelectedId();
            final int userId = usersTable.getSelectedUserId();

            SwingWorker s = new SwingWorker<Boolean, Void>() {

                @Override
                protected Boolean doInBackground() throws Exception {
                    return mainController.doChallenge(userId, teamId, starter);
                }

                @Override
                protected void done() {
                    try {
                        boolean success = get();
                        if (success) {
                            challengeButton.setEnabled(false);
                            battleModel.setUserName(mainModel.getUserName());
                            battleModel.setOpponentName(usersTable.getNameById(userId));
                            mainModel.setStatus(MainModel.Status.AWAITING_RESPONSE, null);
                        } else {
                            displayError("Challenging");
                        }
                    } catch (InterruptedException ex) {
                        displayError("Challenging"
                                + ex.getLocalizedMessage());
                    } catch (ExecutionException ex) {
                        displayError("Challenging"
                                + ex.getLocalizedMessage());
                    }
                }
            };
            s.execute();
        }
    }

    public class RefreshListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent arg0) {
            SwingWorker s = new SwingWorker<List<AvailableUser>, Void>() {

                @Override
                protected List<AvailableUser> doInBackground()
                        throws Exception {
                    return mainController.doUsersUpdate();
                }

                @Override
                protected void done() {
                    try {
                        List<AvailableUser> availableUsers = get();
                        if (availableUsers != null) {
                            ((UsersTable) usersTable).load(availableUsers);
                        } else {
                            displayError("Refreshing user list");
                        }
                    } catch (InterruptedException ex) {
                        displayError("Refreshing user list"
                                + ex.getLocalizedMessage());
                    } catch (ExecutionException ex) {
                        displayError("Refreshing user list"
                                + ex.getLocalizedMessage());
                    }
                }
            };
            s.execute();
        }
    }

    private void guiLogout() {
        SwingWorker s = new SwingWorker<Boolean, Void>() {

            @Override
            protected Boolean doInBackground() throws Exception {
                return mainController.doLogout();
            }

            @Override
            protected void done() {
                try {
                    boolean success = get();
                    mainModel.setStatus(MainModel.Status.LOGGED_OUT, null);
                    if (!success) {
                        displayError("Logging out");
                    }
                } catch (InterruptedException ex) {
                    displayError("Logging out" + ex.getLocalizedMessage());
                } catch (ExecutionException ex) {
                    displayError("Logging out" + ex.getLocalizedMessage());
                    System.err.println(ex);
                }
            }
        };
        s.execute();
    }

    public void updateRules(EnumSet<Rule> newRules) {
        final EnumSet<Rule> rules = newRules;
        SwingWorker s = new SwingWorker<Boolean, Void>() {

            @Override
            protected Boolean doInBackground() throws Exception {
                return mainController.doRuleChange(rules);
            }

            @Override
            protected void done() {
                try {
                    boolean retVal = get();
                    if (retVal) {
                        currentRulesLabel.setText(Rule.getCodeFromValue(
                                Rule.getRuleValueForSet(rules)));
                        creatablePkmnList.updateRules(rules);
                        if (pkmnRandomlyButton.isSelected()) {
                            selectRandomPkmnAndDisable();

                        } else {
                            clearPkmnAndEnable();
                        }
//                        learnableMovesList.updateRules(rules);
                        if (moveRandomlyButton.isSelected()) {
                            selectRandomMovesAndDisable();
                        } else {
                            clearMovesAndEnable();
                        }
                    } else {
                        displayError("Updating rules.");
                    }
                } catch (InterruptedException ex) {
                    displayError("Updating rules. " + ex.getLocalizedMessage());
                } catch (ExecutionException ex) {
                    displayError("Updating rules. " + ex.getLocalizedMessage());
                }
            }
        };
        s.execute();
    }

    void enableMoveList() {
//        learnableMovesList.setEnabled(true);
        moveRandomlyButton.setEnabled(true);
        moveFromListButton.setEnabled(true);
    }

    void disableMoveList() {
//        learnableMovesList.setEnabled(false);
    }

    boolean getMoveRandomlySelected() {
        return moveRandomlyButton.isSelected();
    }

    boolean getPkmnRandomlySelected() {
        return pkmnRandomlyButton.isSelected();
    }

    Collection<Integer> getSelectedLearnableMoves() {
//        return learnableMovesList.getSelectedMoves();
        return null;
    }

    void setPkmnSelection(int id) {
        int row = creatablePkmnList.getRowOfID(id);
        creatablePkmnList.setSelectedIndex(row);
        creatablePkmnList.ensureIndexIsVisible(row);
    }

    int getSelectedCreatablePkmn() {
        return creatablePkmnList.getSelectedPkmnId();
    }

    public void disableBattleButtons() {
        attackButton.setEnabled(false);
        runButton.setEnabled(false);
        switchButton.setEnabled(false);
    }

    public void enableBattleButtons() {
        attackButton.setEnabled(true);
        runButton.setEnabled(true);
        switchButton.setEnabled(true);
    }

    void setAttackButtonToContinue() {
        attackButton.setText("Continue");
    }

    void setAttackButtonToAttack() {
        attackButton.setText("Attack");
    }

    void disableAttackButton() {
        attackButton.setEnabled(false);
    }

    private void disableSwitchButton() {
        switchButton.setEnabled(false);
    }

    private void displayServerStatus(ServerStatus status, EventLog events) {
        OpponentPkmn opponentPkmn = status.getOpponentPkmn();
        opponentLabel.setText(opponentPkmn.getName());
        opponentStatus.setText(Lexicon.pkmnStatuses[opponentPkmn.getStatus()]);
        opponentLevel.setText(Integer.toString(opponentPkmn.getLevel()));
        setOpponentHPBar(opponentPkmn.getlifePercent());
        opponentIcon.setPkmn(opponentPkmn.getNumber(), true);

        OpponentStatus opponentCounters = status.getOpponentStatus();
        ballsPanel.setBalls(opponentCounters.getNormal(),
                opponentCounters.getStatus(), opponentCounters.getFainted());

        List<BattlePkmnRosterItem> ownPkmn = status.getOwnPkmn();
        battleSwitchTable.load(ownPkmn);

        List<Move> ownMoves = status.getOwnMoves();
        battleMovesTable.load(ownMoves);

        int active = status.getActivePkmn();
        BattlePkmnRosterItem pkmn = ownPkmn.get(active);
        pkmnName.setText(pkmn.getNickname());
        pkmnStatus.setText(Lexicon.pkmnStatuses[pkmn.getStatus()]);
        pkmnLevel.setText(Integer.toString(pkmn.getLevel()));
        setPkmnHPBar(pkmn.getLifePercent());
        setHPLabel(pkmn.getCurrentHP(), pkmn.getMaxHP());
        pkmnIcon.setPkmn(pkmn.getNumber(), false);

        messageArea.setText((events.getText(battleModel.getUserName(),
                battleModel.getOpponentName(), pkmn.getNickname(),
                opponentPkmn.getName())));

        battleModel.setBattleStatus(BattleModel.BattleStatus.values()[status.majorStatus]);
    }

    void setHPLabel(int currentHP, int maxHP) {
        pkmnHPFraction.setText(currentHP + "/" + maxHP);
    }

    void setOpponentHPBar(double lifePercent) {
        opponentHPBar.setValue((int) (opponentHPBar.getMaximum()
                * lifePercent));
    }

    void setPkmnHPBar(double lifePercent) {
        pkmnHPBar.setValue((int) (pkmnHPBar.getMaximum() * lifePercent));
    }

    public void displayError(String failurePoint) {
        JOptionPane.showMessageDialog(this, "Sorry, an error occured on the "
                + "server.\n Error context: \"" + failurePoint + "\"", "Server "
                + "Error", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new TabbedMainWindow().setVisible(true);
            }
        });


    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField attackBox;
    private javax.swing.JButton attackButton;
    private javax.swing.JLabel attackLabel;
    private javax.swing.JScrollPane availablePkmnPane;
    private javax.swing.JPanel availablePkmnPanel;
    private openpkmnclient.AvailablePkmnTable availablePkmnTable;
    private javax.swing.JScrollPane availableTeamsPane;
    private javax.swing.JPanel availableTeamsPanel;
    private openpkmnclient.AvailableTeamsTable availableTeamsTable;
    private openpkmnclient.BallsPanel ballsPanel;
    private javax.swing.JLabel batteNowLabel;
    private javax.swing.JScrollPane battleMovesPane;
    private javax.swing.JPanel battleMovesPanel;
    private openpkmnclient.BattleMovesTable battleMovesTable;
    private javax.swing.JPanel battlePanel;
    private javax.swing.JPanel battlePkmnPanel;
    private javax.swing.JScrollPane battleSwitchPane;
    private javax.swing.JPanel battleSwitchPanel;
    private openpkmnclient.BattlePkmnTable battleSwitchTable;
    private javax.swing.JButton challengeButton;
    private javax.swing.JTextArea chatArea;
    private javax.swing.JScrollPane chatAreaPane;
    private javax.swing.JTextField chatTextField;
    private javax.swing.JScrollPane chatUsersPane;
    private openpkmnclient.ChatUsersTable chatUsersTable;
    private javax.swing.JPanel controlsPanel;
    private openpkmnclient.CreatablePkmnList creatablePkmnList;
    private javax.swing.JButton createButton;
    private javax.swing.JLabel currentRulesLabel;
    private javax.swing.JLabel currentRulesTitleLabel;
    private javax.swing.JLabel currentStatusLabel;
    private javax.swing.JLabel currentStatusTitleLabel;
    private javax.swing.JTextField defenseBox;
    private javax.swing.JLabel defenseLabel;
    private javax.swing.JButton deletePkmnButton;
    private javax.swing.JButton deleteTeamButton;
    private javax.swing.JButton findBattleButton;
    private javax.swing.JPanel findBattlePanel;
    private javax.swing.JButton findRandomBattleButton;
    private javax.swing.JButton formTeamButton;
    private javax.swing.JTextField hpBox;
    private javax.swing.JLabel hpLabel;
    private javax.swing.JLabel informationLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private openpkmnclient.LearnableMovesTable learnableMovesTable1;
    private javax.swing.JTextField levelBox;
    private javax.swing.JLabel levelLabel;
    private javax.swing.JPanel makePkmnPanel;
    private javax.swing.JTextArea messageArea;
    private javax.swing.JScrollPane messageAreaPane;
    private javax.swing.JLabel moreSpecificLabel;
    private javax.swing.JRadioButton moveFromListButton;
    private javax.swing.JPanel movePanel;
    private javax.swing.JRadioButton moveRandomlyButton;
    private javax.swing.JTextField nicknameField;
    private javax.swing.JLabel nicknameLabel;
    private javax.swing.JProgressBar opponentHPBar;
    private javax.swing.JLabel opponentHPLabel;
    private openpkmnclient.PkmnIcon opponentIcon;
    private javax.swing.JLabel opponentLabel;
    private javax.swing.JLabel opponentLevel;
    private javax.swing.JPanel opponentPkmnPanel;
    private javax.swing.JLabel opponentStatus;
    private javax.swing.ButtonGroup pkmnButtonGroup;
    private javax.swing.JRadioButton pkmnFromListButton;
    private javax.swing.JProgressBar pkmnHPBar;
    private javax.swing.JLabel pkmnHPFraction;
    private javax.swing.JLabel pkmnHPLabel;
    private openpkmnclient.PkmnIcon pkmnIcon;
    private javax.swing.JLabel pkmnLevel;
    private javax.swing.JLabel pkmnName;
    private javax.swing.JScrollPane pkmnPane;
    private javax.swing.JPanel pkmnPanel;
    private javax.swing.JRadioButton pkmnRandomlyButton;
    private javax.swing.JLabel pkmnStatus;
    private javax.swing.JButton randomTeamButton;
    private javax.swing.JComboBox recipientMenu;
    private javax.swing.JScrollPane rulesPane;
    private openpkmnclient.RulesTable rulesTable;
    private javax.swing.JButton runButton;
    private javax.swing.JLabel selectedStarterLabel;
    private javax.swing.JLabel selectedStarterTitleLabel;
    private javax.swing.JLabel selectedTeamLabel;
    private javax.swing.JLabel selectedTeamRulesLabel;
    private javax.swing.JLabel selectedTeamRulesTitleLabel;
    private javax.swing.JLabel selectedTeamTitleLabel;
    private javax.swing.JPanel selectionPanel;
    private javax.swing.JTextField specialBox;
    private javax.swing.JLabel specialLabel;
    private javax.swing.JTextField speedBox;
    private javax.swing.JLabel speedLabel;
    private javax.swing.JLabel starterLabel;
    private openpkmnclient.StarterList starterList;
    private javax.swing.ButtonGroup statButtonGroup;
    private javax.swing.JLabel statMechanismLabel;
    private javax.swing.JButton switchButton;
    private javax.swing.JTabbedPane tabbedPanel;
    private javax.swing.ButtonGroup teamButtonGroup;
    private javax.swing.JPanel teamFormationPanel;
    private javax.swing.JPanel teamsPanel;
    private javax.swing.JLabel textToLabel;
    private javax.swing.JCheckBox unevolvedBox;
    private javax.swing.JRadioButton useDV;
    private javax.swing.JRadioButton useStat;
    private javax.swing.JScrollPane usersPane;
    private javax.swing.JPanel usersPanel;
    private openpkmnclient.UsersTable usersTable;
    private javax.swing.JButton waitButton;
    // End of variables declaration//GEN-END:variables
}
